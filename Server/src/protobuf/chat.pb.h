// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/chat.proto

#ifndef PROTOBUF_protobuf_2fchat_2eproto__INCLUDED
#define PROTOBUF_protobuf_2fchat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
namespace chat {
class ChatMessage;
class ChatMessageDefaultTypeInternal;
extern ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
class GetMessagesRequest;
class GetMessagesRequestDefaultTypeInternal;
extern GetMessagesRequestDefaultTypeInternal _GetMessagesRequest_default_instance_;
class GetMessagesResponse;
class GetMessagesResponseDefaultTypeInternal;
extern GetMessagesResponseDefaultTypeInternal _GetMessagesResponse_default_instance_;
class GetUserInfosRequest;
class GetUserInfosRequestDefaultTypeInternal;
extern GetUserInfosRequestDefaultTypeInternal _GetUserInfosRequest_default_instance_;
class GetUserInfosResponse;
class GetUserInfosResponseDefaultTypeInternal;
extern GetUserInfosResponseDefaultTypeInternal _GetUserInfosResponse_default_instance_;
class LoginRequest;
class LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginResponse;
class LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class LogoutRequest;
class LogoutRequestDefaultTypeInternal;
extern LogoutRequestDefaultTypeInternal _LogoutRequest_default_instance_;
class MakeFriendRequest;
class MakeFriendRequestDefaultTypeInternal;
extern MakeFriendRequestDefaultTypeInternal _MakeFriendRequest_default_instance_;
class NetMsg;
class NetMsgDefaultTypeInternal;
extern NetMsgDefaultTypeInternal _NetMsg_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class SignupRequest;
class SignupRequestDefaultTypeInternal;
extern SignupRequestDefaultTypeInternal _SignupRequest_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
}  // namespace chat

namespace chat {

namespace protobuf_protobuf_2fchat_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_protobuf_2fchat_2eproto

// ===================================================================

class NetMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.NetMsg) */ {
 public:
  NetMsg();
  virtual ~NetMsg();

  NetMsg(const NetMsg& from);

  inline NetMsg& operator=(const NetMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetMsg(NetMsg&& from) noexcept
    : NetMsg() {
    *this = ::std::move(from);
  }

  inline NetMsg& operator=(NetMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetMsg& default_instance();

  static inline const NetMsg* internal_default_instance() {
    return reinterpret_cast<const NetMsg*>(
               &_NetMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(NetMsg* other);
  friend void swap(NetMsg& a, NetMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  NetMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NetMsg& from);
  void MergeFrom(const NetMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NetMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // .google.protobuf.Any data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::google::protobuf::Any& data() const;
  ::google::protobuf::Any* mutable_data();
  ::google::protobuf::Any* release_data();
  void set_allocated_data(::google::protobuf::Any* data);

  // @@protoc_insertion_point(class_scope:chat.NetMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::Any* data_;
  mutable int _cached_size_;
  friend struct protobuf_protobuf_2fchat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const PROTOBUF_FINAL { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string info = 2;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::std::string& info() const;
  void set_info(const ::std::string& value);
  #if LANG_CXX11
  void set_info(::std::string&& value);
  #endif
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  ::std::string* mutable_info();
  ::std::string* release_info();
  void set_allocated_info(::std::string* info);

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:chat.Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr info_;
  bool success_;
  mutable int _cached_size_;
  friend struct protobuf_protobuf_2fchat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.LoginRequest) */ {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequest& default_instance();

  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(LoginRequest* other);
  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:chat.LoginRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable int _cached_size_;
  friend struct protobuf_protobuf_2fchat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.LoginResponse) */ {
 public:
  LoginResponse();
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginResponse& default_instance();

  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(LoginResponse* other);
  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 2;
  void clear_token();
  static const int kTokenFieldNumber = 2;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string info = 4;
  void clear_info();
  static const int kInfoFieldNumber = 4;
  const ::std::string& info() const;
  void set_info(const ::std::string& value);
  #if LANG_CXX11
  void set_info(::std::string&& value);
  #endif
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  ::std::string* mutable_info();
  ::std::string* release_info();
  void set_allocated_info(::std::string* info);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // bool success = 3;
  void clear_success();
  static const int kSuccessFieldNumber = 3;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:chat.LoginResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr info_;
  ::google::protobuf::int32 id_;
  bool success_;
  mutable int _cached_size_;
  friend struct protobuf_protobuf_2fchat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SignupRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.SignupRequest) */ {
 public:
  SignupRequest();
  virtual ~SignupRequest();

  SignupRequest(const SignupRequest& from);

  inline SignupRequest& operator=(const SignupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignupRequest(SignupRequest&& from) noexcept
    : SignupRequest() {
    *this = ::std::move(from);
  }

  inline SignupRequest& operator=(SignupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SignupRequest& default_instance();

  static inline const SignupRequest* internal_default_instance() {
    return reinterpret_cast<const SignupRequest*>(
               &_SignupRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(SignupRequest* other);
  friend void swap(SignupRequest& a, SignupRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignupRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SignupRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SignupRequest& from);
  void MergeFrom(const SignupRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SignupRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:chat.SignupRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable int _cached_size_;
  friend struct protobuf_protobuf_2fchat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogoutRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.LogoutRequest) */ {
 public:
  LogoutRequest();
  virtual ~LogoutRequest();

  LogoutRequest(const LogoutRequest& from);

  inline LogoutRequest& operator=(const LogoutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogoutRequest(LogoutRequest&& from) noexcept
    : LogoutRequest() {
    *this = ::std::move(from);
  }

  inline LogoutRequest& operator=(LogoutRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogoutRequest& default_instance();

  static inline const LogoutRequest* internal_default_instance() {
    return reinterpret_cast<const LogoutRequest*>(
               &_LogoutRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(LogoutRequest* other);
  friend void swap(LogoutRequest& a, LogoutRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogoutRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  LogoutRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LogoutRequest& from);
  void MergeFrom(const LogoutRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LogoutRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 senderID = 1;
  void clear_senderid();
  static const int kSenderIDFieldNumber = 1;
  ::google::protobuf::int32 senderid() const;
  void set_senderid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chat.LogoutRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 senderid_;
  mutable int _cached_size_;
  friend struct protobuf_protobuf_2fchat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetUserInfosRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.GetUserInfosRequest) */ {
 public:
  GetUserInfosRequest();
  virtual ~GetUserInfosRequest();

  GetUserInfosRequest(const GetUserInfosRequest& from);

  inline GetUserInfosRequest& operator=(const GetUserInfosRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetUserInfosRequest(GetUserInfosRequest&& from) noexcept
    : GetUserInfosRequest() {
    *this = ::std::move(from);
  }

  inline GetUserInfosRequest& operator=(GetUserInfosRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetUserInfosRequest& default_instance();

  static inline const GetUserInfosRequest* internal_default_instance() {
    return reinterpret_cast<const GetUserInfosRequest*>(
               &_GetUserInfosRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(GetUserInfosRequest* other);
  friend void swap(GetUserInfosRequest& a, GetUserInfosRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetUserInfosRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetUserInfosRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetUserInfosRequest& from);
  void MergeFrom(const GetUserInfosRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetUserInfosRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 senderID = 1;
  void clear_senderid();
  static const int kSenderIDFieldNumber = 1;
  ::google::protobuf::int32 senderid() const;
  void set_senderid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chat.GetUserInfosRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 senderid_;
  mutable int _cached_size_;
  friend struct protobuf_protobuf_2fchat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetUserInfosResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.GetUserInfosResponse) */ {
 public:
  GetUserInfosResponse();
  virtual ~GetUserInfosResponse();

  GetUserInfosResponse(const GetUserInfosResponse& from);

  inline GetUserInfosResponse& operator=(const GetUserInfosResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetUserInfosResponse(GetUserInfosResponse&& from) noexcept
    : GetUserInfosResponse() {
    *this = ::std::move(from);
  }

  inline GetUserInfosResponse& operator=(GetUserInfosResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetUserInfosResponse& default_instance();

  static inline const GetUserInfosResponse* internal_default_instance() {
    return reinterpret_cast<const GetUserInfosResponse*>(
               &_GetUserInfosResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(GetUserInfosResponse* other);
  friend void swap(GetUserInfosResponse& a, GetUserInfosResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetUserInfosResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetUserInfosResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetUserInfosResponse& from);
  void MergeFrom(const GetUserInfosResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetUserInfosResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chat.UserInfo users = 1;
  int users_size() const;
  void clear_users();
  static const int kUsersFieldNumber = 1;
  const ::chat::UserInfo& users(int index) const;
  ::chat::UserInfo* mutable_users(int index);
  ::chat::UserInfo* add_users();
  ::google::protobuf::RepeatedPtrField< ::chat::UserInfo >*
      mutable_users();
  const ::google::protobuf::RepeatedPtrField< ::chat::UserInfo >&
      users() const;

  // @@protoc_insertion_point(class_scope:chat.GetUserInfosResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::chat::UserInfo > users_;
  mutable int _cached_size_;
  friend struct protobuf_protobuf_2fchat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetMessagesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.GetMessagesRequest) */ {
 public:
  GetMessagesRequest();
  virtual ~GetMessagesRequest();

  GetMessagesRequest(const GetMessagesRequest& from);

  inline GetMessagesRequest& operator=(const GetMessagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMessagesRequest(GetMessagesRequest&& from) noexcept
    : GetMessagesRequest() {
    *this = ::std::move(from);
  }

  inline GetMessagesRequest& operator=(GetMessagesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMessagesRequest& default_instance();

  static inline const GetMessagesRequest* internal_default_instance() {
    return reinterpret_cast<const GetMessagesRequest*>(
               &_GetMessagesRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(GetMessagesRequest* other);
  friend void swap(GetMessagesRequest& a, GetMessagesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMessagesRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetMessagesRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetMessagesRequest& from);
  void MergeFrom(const GetMessagesRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetMessagesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 senderID = 1;
  void clear_senderid();
  static const int kSenderIDFieldNumber = 1;
  ::google::protobuf::int32 senderid() const;
  void set_senderid(::google::protobuf::int32 value);

  // int32 afterTimeUnix = 2;
  void clear_aftertimeunix();
  static const int kAfterTimeUnixFieldNumber = 2;
  ::google::protobuf::int32 aftertimeunix() const;
  void set_aftertimeunix(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chat.GetMessagesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 senderid_;
  ::google::protobuf::int32 aftertimeunix_;
  mutable int _cached_size_;
  friend struct protobuf_protobuf_2fchat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetMessagesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.GetMessagesResponse) */ {
 public:
  GetMessagesResponse();
  virtual ~GetMessagesResponse();

  GetMessagesResponse(const GetMessagesResponse& from);

  inline GetMessagesResponse& operator=(const GetMessagesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMessagesResponse(GetMessagesResponse&& from) noexcept
    : GetMessagesResponse() {
    *this = ::std::move(from);
  }

  inline GetMessagesResponse& operator=(GetMessagesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMessagesResponse& default_instance();

  static inline const GetMessagesResponse* internal_default_instance() {
    return reinterpret_cast<const GetMessagesResponse*>(
               &_GetMessagesResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(GetMessagesResponse* other);
  friend void swap(GetMessagesResponse& a, GetMessagesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMessagesResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetMessagesResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetMessagesResponse& from);
  void MergeFrom(const GetMessagesResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetMessagesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chat.ChatMessage messages = 1;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 1;
  const ::chat::ChatMessage& messages(int index) const;
  ::chat::ChatMessage* mutable_messages(int index);
  ::chat::ChatMessage* add_messages();
  ::google::protobuf::RepeatedPtrField< ::chat::ChatMessage >*
      mutable_messages();
  const ::google::protobuf::RepeatedPtrField< ::chat::ChatMessage >&
      messages() const;

  // @@protoc_insertion_point(class_scope:chat.GetMessagesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::chat::ChatMessage > messages_;
  mutable int _cached_size_;
  friend struct protobuf_protobuf_2fchat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MakeFriendRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.MakeFriendRequest) */ {
 public:
  MakeFriendRequest();
  virtual ~MakeFriendRequest();

  MakeFriendRequest(const MakeFriendRequest& from);

  inline MakeFriendRequest& operator=(const MakeFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MakeFriendRequest(MakeFriendRequest&& from) noexcept
    : MakeFriendRequest() {
    *this = ::std::move(from);
  }

  inline MakeFriendRequest& operator=(MakeFriendRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MakeFriendRequest& default_instance();

  static inline const MakeFriendRequest* internal_default_instance() {
    return reinterpret_cast<const MakeFriendRequest*>(
               &_MakeFriendRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(MakeFriendRequest* other);
  friend void swap(MakeFriendRequest& a, MakeFriendRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MakeFriendRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  MakeFriendRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MakeFriendRequest& from);
  void MergeFrom(const MakeFriendRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MakeFriendRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 senderID = 1;
  void clear_senderid();
  static const int kSenderIDFieldNumber = 1;
  ::google::protobuf::int32 senderid() const;
  void set_senderid(::google::protobuf::int32 value);

  // int32 targetID = 2;
  void clear_targetid();
  static const int kTargetIDFieldNumber = 2;
  ::google::protobuf::int32 targetid() const;
  void set_targetid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chat.MakeFriendRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 senderid_;
  ::google::protobuf::int32 targetid_;
  mutable int _cached_size_;
  friend struct protobuf_protobuf_2fchat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChatMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.ChatMessage) */ {
 public:
  ChatMessage();
  virtual ~ChatMessage();

  ChatMessage(const ChatMessage& from);

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatMessage(ChatMessage&& from) noexcept
    : ChatMessage() {
    *this = ::std::move(from);
  }

  inline ChatMessage& operator=(ChatMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatMessage& default_instance();

  enum ContentCase {
    kText = 10,
    kFile = 11,
    CONTENT_NOT_SET = 0,
  };

  static inline const ChatMessage* internal_default_instance() {
    return reinterpret_cast<const ChatMessage*>(
               &_ChatMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(ChatMessage* other);
  friend void swap(ChatMessage& a, ChatMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  ChatMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChatMessage& from);
  void MergeFrom(const ChatMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChatMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 senderID = 1;
  void clear_senderid();
  static const int kSenderIDFieldNumber = 1;
  ::google::protobuf::int32 senderid() const;
  void set_senderid(::google::protobuf::int32 value);

  // int32 targetID = 2;
  void clear_targetid();
  static const int kTargetIDFieldNumber = 2;
  ::google::protobuf::int32 targetid() const;
  void set_targetid(::google::protobuf::int32 value);

  // int32 timeUnix = 3;
  void clear_timeunix();
  static const int kTimeUnixFieldNumber = 3;
  ::google::protobuf::int32 timeunix() const;
  void set_timeunix(::google::protobuf::int32 value);

  // string text = 10;
  private:
  bool has_text() const;
  public:
  void clear_text();
  static const int kTextFieldNumber = 10;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // bytes file = 11;
  private:
  bool has_file() const;
  public:
  void clear_file();
  static const int kFileFieldNumber = 11;
  const ::std::string& file() const;
  void set_file(const ::std::string& value);
  #if LANG_CXX11
  void set_file(::std::string&& value);
  #endif
  void set_file(const char* value);
  void set_file(const void* value, size_t size);
  ::std::string* mutable_file();
  ::std::string* release_file();
  void set_allocated_file(::std::string* file);

  ContentCase Content_case() const;
  // @@protoc_insertion_point(class_scope:chat.ChatMessage)
 private:
  void set_has_text();
  void set_has_file();

  inline bool has_Content() const;
  void clear_Content();
  inline void clear_has_Content();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 senderid_;
  ::google::protobuf::int32 targetid_;
  ::google::protobuf::int32 timeunix_;
  union ContentUnion {
    ContentUnion() {}
    ::google::protobuf::internal::ArenaStringPtr text_;
    ::google::protobuf::internal::ArenaStringPtr file_;
  } Content_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_protobuf_2fchat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.UserInfo) */ {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfo& default_instance();

  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(UserInfo* other);
  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  UserInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 2;
  void clear_username();
  static const int kUsernameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // bool isFriend = 10;
  void clear_isfriend();
  static const int kIsFriendFieldNumber = 10;
  bool isfriend() const;
  void set_isfriend(bool value);

  // bool isOnline = 11;
  void clear_isonline();
  static const int kIsOnlineFieldNumber = 11;
  bool isonline() const;
  void set_isonline(bool value);

  // @@protoc_insertion_point(class_scope:chat.UserInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::int32 id_;
  bool isfriend_;
  bool isonline_;
  mutable int _cached_size_;
  friend struct protobuf_protobuf_2fchat_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetMsg

// string token = 1;
inline void NetMsg::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetMsg::token() const {
  // @@protoc_insertion_point(field_get:chat.NetMsg.token)
  return token_.GetNoArena();
}
inline void NetMsg::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.NetMsg.token)
}
#if LANG_CXX11
inline void NetMsg::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.NetMsg.token)
}
#endif
inline void NetMsg::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.NetMsg.token)
}
inline void NetMsg::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.NetMsg.token)
}
inline ::std::string* NetMsg::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:chat.NetMsg.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetMsg::release_token() {
  // @@protoc_insertion_point(field_release:chat.NetMsg.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetMsg::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:chat.NetMsg.token)
}

// .google.protobuf.Any data = 2;
inline bool NetMsg::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
inline void NetMsg::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
inline const ::google::protobuf::Any& NetMsg::data() const {
  const ::google::protobuf::Any* p = data_;
  // @@protoc_insertion_point(field_get:chat.NetMsg.data)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* NetMsg::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:chat.NetMsg.data)
  return data_;
}
inline ::google::protobuf::Any* NetMsg::release_data() {
  // @@protoc_insertion_point(field_release:chat.NetMsg.data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = NULL;
  return temp;
}
inline void NetMsg::set_allocated_data(::google::protobuf::Any* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chat.NetMsg.data)
}

// -------------------------------------------------------------------

// Response

// bool success = 1;
inline void Response::clear_success() {
  success_ = false;
}
inline bool Response::success() const {
  // @@protoc_insertion_point(field_get:chat.Response.success)
  return success_;
}
inline void Response::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:chat.Response.success)
}

// string info = 2;
inline void Response::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Response::info() const {
  // @@protoc_insertion_point(field_get:chat.Response.info)
  return info_.GetNoArena();
}
inline void Response::set_info(const ::std::string& value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Response.info)
}
#if LANG_CXX11
inline void Response::set_info(::std::string&& value) {
  
  info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.Response.info)
}
#endif
inline void Response::set_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Response.info)
}
inline void Response::set_info(const char* value, size_t size) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Response.info)
}
inline ::std::string* Response::mutable_info() {
  
  // @@protoc_insertion_point(field_mutable:chat.Response.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_info() {
  // @@protoc_insertion_point(field_release:chat.Response.info)
  
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:chat.Response.info)
}

// -------------------------------------------------------------------

// LoginRequest

// string username = 1;
inline void LoginRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequest::username() const {
  // @@protoc_insertion_point(field_get:chat.LoginRequest.username)
  return username_.GetNoArena();
}
inline void LoginRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.LoginRequest.username)
}
#if LANG_CXX11
inline void LoginRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.LoginRequest.username)
}
#endif
inline void LoginRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.LoginRequest.username)
}
inline void LoginRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.LoginRequest.username)
}
inline ::std::string* LoginRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:chat.LoginRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_username() {
  // @@protoc_insertion_point(field_release:chat.LoginRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:chat.LoginRequest.username)
}

// string password = 2;
inline void LoginRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequest::password() const {
  // @@protoc_insertion_point(field_get:chat.LoginRequest.password)
  return password_.GetNoArena();
}
inline void LoginRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.LoginRequest.password)
}
#if LANG_CXX11
inline void LoginRequest::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.LoginRequest.password)
}
#endif
inline void LoginRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.LoginRequest.password)
}
inline void LoginRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.LoginRequest.password)
}
inline ::std::string* LoginRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:chat.LoginRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_password() {
  // @@protoc_insertion_point(field_release:chat.LoginRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:chat.LoginRequest.password)
}

// -------------------------------------------------------------------

// LoginResponse

// bool success = 3;
inline void LoginResponse::clear_success() {
  success_ = false;
}
inline bool LoginResponse::success() const {
  // @@protoc_insertion_point(field_get:chat.LoginResponse.success)
  return success_;
}
inline void LoginResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:chat.LoginResponse.success)
}

// string info = 4;
inline void LoginResponse::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginResponse::info() const {
  // @@protoc_insertion_point(field_get:chat.LoginResponse.info)
  return info_.GetNoArena();
}
inline void LoginResponse::set_info(const ::std::string& value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.LoginResponse.info)
}
#if LANG_CXX11
inline void LoginResponse::set_info(::std::string&& value) {
  
  info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.LoginResponse.info)
}
#endif
inline void LoginResponse::set_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.LoginResponse.info)
}
inline void LoginResponse::set_info(const char* value, size_t size) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.LoginResponse.info)
}
inline ::std::string* LoginResponse::mutable_info() {
  
  // @@protoc_insertion_point(field_mutable:chat.LoginResponse.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginResponse::release_info() {
  // @@protoc_insertion_point(field_release:chat.LoginResponse.info)
  
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginResponse::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:chat.LoginResponse.info)
}

// int32 id = 1;
inline void LoginResponse::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 LoginResponse::id() const {
  // @@protoc_insertion_point(field_get:chat.LoginResponse.id)
  return id_;
}
inline void LoginResponse::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:chat.LoginResponse.id)
}

// string token = 2;
inline void LoginResponse::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginResponse::token() const {
  // @@protoc_insertion_point(field_get:chat.LoginResponse.token)
  return token_.GetNoArena();
}
inline void LoginResponse::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.LoginResponse.token)
}
#if LANG_CXX11
inline void LoginResponse::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.LoginResponse.token)
}
#endif
inline void LoginResponse::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.LoginResponse.token)
}
inline void LoginResponse::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.LoginResponse.token)
}
inline ::std::string* LoginResponse::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:chat.LoginResponse.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginResponse::release_token() {
  // @@protoc_insertion_point(field_release:chat.LoginResponse.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginResponse::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:chat.LoginResponse.token)
}

// -------------------------------------------------------------------

// SignupRequest

// string username = 1;
inline void SignupRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignupRequest::username() const {
  // @@protoc_insertion_point(field_get:chat.SignupRequest.username)
  return username_.GetNoArena();
}
inline void SignupRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.SignupRequest.username)
}
#if LANG_CXX11
inline void SignupRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.SignupRequest.username)
}
#endif
inline void SignupRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.SignupRequest.username)
}
inline void SignupRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.SignupRequest.username)
}
inline ::std::string* SignupRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:chat.SignupRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignupRequest::release_username() {
  // @@protoc_insertion_point(field_release:chat.SignupRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignupRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:chat.SignupRequest.username)
}

// string password = 2;
inline void SignupRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignupRequest::password() const {
  // @@protoc_insertion_point(field_get:chat.SignupRequest.password)
  return password_.GetNoArena();
}
inline void SignupRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.SignupRequest.password)
}
#if LANG_CXX11
inline void SignupRequest::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.SignupRequest.password)
}
#endif
inline void SignupRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.SignupRequest.password)
}
inline void SignupRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.SignupRequest.password)
}
inline ::std::string* SignupRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:chat.SignupRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignupRequest::release_password() {
  // @@protoc_insertion_point(field_release:chat.SignupRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignupRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:chat.SignupRequest.password)
}

// -------------------------------------------------------------------

// LogoutRequest

// int32 senderID = 1;
inline void LogoutRequest::clear_senderid() {
  senderid_ = 0;
}
inline ::google::protobuf::int32 LogoutRequest::senderid() const {
  // @@protoc_insertion_point(field_get:chat.LogoutRequest.senderID)
  return senderid_;
}
inline void LogoutRequest::set_senderid(::google::protobuf::int32 value) {
  
  senderid_ = value;
  // @@protoc_insertion_point(field_set:chat.LogoutRequest.senderID)
}

// -------------------------------------------------------------------

// GetUserInfosRequest

// int32 senderID = 1;
inline void GetUserInfosRequest::clear_senderid() {
  senderid_ = 0;
}
inline ::google::protobuf::int32 GetUserInfosRequest::senderid() const {
  // @@protoc_insertion_point(field_get:chat.GetUserInfosRequest.senderID)
  return senderid_;
}
inline void GetUserInfosRequest::set_senderid(::google::protobuf::int32 value) {
  
  senderid_ = value;
  // @@protoc_insertion_point(field_set:chat.GetUserInfosRequest.senderID)
}

// -------------------------------------------------------------------

// GetUserInfosResponse

// repeated .chat.UserInfo users = 1;
inline int GetUserInfosResponse::users_size() const {
  return users_.size();
}
inline void GetUserInfosResponse::clear_users() {
  users_.Clear();
}
inline const ::chat::UserInfo& GetUserInfosResponse::users(int index) const {
  // @@protoc_insertion_point(field_get:chat.GetUserInfosResponse.users)
  return users_.Get(index);
}
inline ::chat::UserInfo* GetUserInfosResponse::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:chat.GetUserInfosResponse.users)
  return users_.Mutable(index);
}
inline ::chat::UserInfo* GetUserInfosResponse::add_users() {
  // @@protoc_insertion_point(field_add:chat.GetUserInfosResponse.users)
  return users_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::chat::UserInfo >*
GetUserInfosResponse::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:chat.GetUserInfosResponse.users)
  return &users_;
}
inline const ::google::protobuf::RepeatedPtrField< ::chat::UserInfo >&
GetUserInfosResponse::users() const {
  // @@protoc_insertion_point(field_list:chat.GetUserInfosResponse.users)
  return users_;
}

// -------------------------------------------------------------------

// GetMessagesRequest

// int32 senderID = 1;
inline void GetMessagesRequest::clear_senderid() {
  senderid_ = 0;
}
inline ::google::protobuf::int32 GetMessagesRequest::senderid() const {
  // @@protoc_insertion_point(field_get:chat.GetMessagesRequest.senderID)
  return senderid_;
}
inline void GetMessagesRequest::set_senderid(::google::protobuf::int32 value) {
  
  senderid_ = value;
  // @@protoc_insertion_point(field_set:chat.GetMessagesRequest.senderID)
}

// int32 afterTimeUnix = 2;
inline void GetMessagesRequest::clear_aftertimeunix() {
  aftertimeunix_ = 0;
}
inline ::google::protobuf::int32 GetMessagesRequest::aftertimeunix() const {
  // @@protoc_insertion_point(field_get:chat.GetMessagesRequest.afterTimeUnix)
  return aftertimeunix_;
}
inline void GetMessagesRequest::set_aftertimeunix(::google::protobuf::int32 value) {
  
  aftertimeunix_ = value;
  // @@protoc_insertion_point(field_set:chat.GetMessagesRequest.afterTimeUnix)
}

// -------------------------------------------------------------------

// GetMessagesResponse

// repeated .chat.ChatMessage messages = 1;
inline int GetMessagesResponse::messages_size() const {
  return messages_.size();
}
inline void GetMessagesResponse::clear_messages() {
  messages_.Clear();
}
inline const ::chat::ChatMessage& GetMessagesResponse::messages(int index) const {
  // @@protoc_insertion_point(field_get:chat.GetMessagesResponse.messages)
  return messages_.Get(index);
}
inline ::chat::ChatMessage* GetMessagesResponse::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:chat.GetMessagesResponse.messages)
  return messages_.Mutable(index);
}
inline ::chat::ChatMessage* GetMessagesResponse::add_messages() {
  // @@protoc_insertion_point(field_add:chat.GetMessagesResponse.messages)
  return messages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::chat::ChatMessage >*
GetMessagesResponse::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:chat.GetMessagesResponse.messages)
  return &messages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::chat::ChatMessage >&
GetMessagesResponse::messages() const {
  // @@protoc_insertion_point(field_list:chat.GetMessagesResponse.messages)
  return messages_;
}

// -------------------------------------------------------------------

// MakeFriendRequest

// int32 senderID = 1;
inline void MakeFriendRequest::clear_senderid() {
  senderid_ = 0;
}
inline ::google::protobuf::int32 MakeFriendRequest::senderid() const {
  // @@protoc_insertion_point(field_get:chat.MakeFriendRequest.senderID)
  return senderid_;
}
inline void MakeFriendRequest::set_senderid(::google::protobuf::int32 value) {
  
  senderid_ = value;
  // @@protoc_insertion_point(field_set:chat.MakeFriendRequest.senderID)
}

// int32 targetID = 2;
inline void MakeFriendRequest::clear_targetid() {
  targetid_ = 0;
}
inline ::google::protobuf::int32 MakeFriendRequest::targetid() const {
  // @@protoc_insertion_point(field_get:chat.MakeFriendRequest.targetID)
  return targetid_;
}
inline void MakeFriendRequest::set_targetid(::google::protobuf::int32 value) {
  
  targetid_ = value;
  // @@protoc_insertion_point(field_set:chat.MakeFriendRequest.targetID)
}

// -------------------------------------------------------------------

// ChatMessage

// int32 senderID = 1;
inline void ChatMessage::clear_senderid() {
  senderid_ = 0;
}
inline ::google::protobuf::int32 ChatMessage::senderid() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.senderID)
  return senderid_;
}
inline void ChatMessage::set_senderid(::google::protobuf::int32 value) {
  
  senderid_ = value;
  // @@protoc_insertion_point(field_set:chat.ChatMessage.senderID)
}

// int32 targetID = 2;
inline void ChatMessage::clear_targetid() {
  targetid_ = 0;
}
inline ::google::protobuf::int32 ChatMessage::targetid() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.targetID)
  return targetid_;
}
inline void ChatMessage::set_targetid(::google::protobuf::int32 value) {
  
  targetid_ = value;
  // @@protoc_insertion_point(field_set:chat.ChatMessage.targetID)
}

// int32 timeUnix = 3;
inline void ChatMessage::clear_timeunix() {
  timeunix_ = 0;
}
inline ::google::protobuf::int32 ChatMessage::timeunix() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.timeUnix)
  return timeunix_;
}
inline void ChatMessage::set_timeunix(::google::protobuf::int32 value) {
  
  timeunix_ = value;
  // @@protoc_insertion_point(field_set:chat.ChatMessage.timeUnix)
}

// string text = 10;
inline bool ChatMessage::has_text() const {
  return Content_case() == kText;
}
inline void ChatMessage::set_has_text() {
  _oneof_case_[0] = kText;
}
inline void ChatMessage::clear_text() {
  if (has_text()) {
    Content_.text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_Content();
  }
}
inline const ::std::string& ChatMessage::text() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.text)
  if (has_text()) {
    return Content_.text_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ChatMessage::set_text(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chat.ChatMessage.text)
  if (!has_text()) {
    clear_Content();
    set_has_text();
    Content_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Content_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ChatMessage.text)
}
#if LANG_CXX11
inline void ChatMessage::set_text(::std::string&& value) {
  // @@protoc_insertion_point(field_set:chat.ChatMessage.text)
  if (!has_text()) {
    clear_Content();
    set_has_text();
    Content_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Content_.text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.ChatMessage.text)
}
#endif
inline void ChatMessage::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_text()) {
    clear_Content();
    set_has_text();
    Content_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Content_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ChatMessage.text)
}
inline void ChatMessage::set_text(const char* value, size_t size) {
  if (!has_text()) {
    clear_Content();
    set_has_text();
    Content_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Content_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ChatMessage.text)
}
inline ::std::string* ChatMessage::mutable_text() {
  if (!has_text()) {
    clear_Content();
    set_has_text();
    Content_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:chat.ChatMessage.text)
  return Content_.text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessage::release_text() {
  // @@protoc_insertion_point(field_release:chat.ChatMessage.text)
  if (has_text()) {
    clear_has_Content();
    return Content_.text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void ChatMessage::set_allocated_text(::std::string* text) {
  if (!has_text()) {
    Content_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_Content();
  if (text != NULL) {
    set_has_text();
    Content_.text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        text);
  }
  // @@protoc_insertion_point(field_set_allocated:chat.ChatMessage.text)
}

// bytes file = 11;
inline bool ChatMessage::has_file() const {
  return Content_case() == kFile;
}
inline void ChatMessage::set_has_file() {
  _oneof_case_[0] = kFile;
}
inline void ChatMessage::clear_file() {
  if (has_file()) {
    Content_.file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_Content();
  }
}
inline const ::std::string& ChatMessage::file() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.file)
  if (has_file()) {
    return Content_.file_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ChatMessage::set_file(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chat.ChatMessage.file)
  if (!has_file()) {
    clear_Content();
    set_has_file();
    Content_.file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Content_.file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ChatMessage.file)
}
#if LANG_CXX11
inline void ChatMessage::set_file(::std::string&& value) {
  // @@protoc_insertion_point(field_set:chat.ChatMessage.file)
  if (!has_file()) {
    clear_Content();
    set_has_file();
    Content_.file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Content_.file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.ChatMessage.file)
}
#endif
inline void ChatMessage::set_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_file()) {
    clear_Content();
    set_has_file();
    Content_.file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Content_.file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ChatMessage.file)
}
inline void ChatMessage::set_file(const void* value, size_t size) {
  if (!has_file()) {
    clear_Content();
    set_has_file();
    Content_.file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Content_.file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ChatMessage.file)
}
inline ::std::string* ChatMessage::mutable_file() {
  if (!has_file()) {
    clear_Content();
    set_has_file();
    Content_.file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:chat.ChatMessage.file)
  return Content_.file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessage::release_file() {
  // @@protoc_insertion_point(field_release:chat.ChatMessage.file)
  if (has_file()) {
    clear_has_Content();
    return Content_.file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void ChatMessage::set_allocated_file(::std::string* file) {
  if (!has_file()) {
    Content_.file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_Content();
  if (file != NULL) {
    set_has_file();
    Content_.file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        file);
  }
  // @@protoc_insertion_point(field_set_allocated:chat.ChatMessage.file)
}

inline bool ChatMessage::has_Content() const {
  return Content_case() != CONTENT_NOT_SET;
}
inline void ChatMessage::clear_has_Content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
inline ChatMessage::ContentCase ChatMessage::Content_case() const {
  return ChatMessage::ContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// UserInfo

// int32 id = 1;
inline void UserInfo::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 UserInfo::id() const {
  // @@protoc_insertion_point(field_get:chat.UserInfo.id)
  return id_;
}
inline void UserInfo::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:chat.UserInfo.id)
}

// string username = 2;
inline void UserInfo::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::username() const {
  // @@protoc_insertion_point(field_get:chat.UserInfo.username)
  return username_.GetNoArena();
}
inline void UserInfo::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.UserInfo.username)
}
#if LANG_CXX11
inline void UserInfo::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chat.UserInfo.username)
}
#endif
inline void UserInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.UserInfo.username)
}
inline void UserInfo::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.UserInfo.username)
}
inline ::std::string* UserInfo::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:chat.UserInfo.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_username() {
  // @@protoc_insertion_point(field_release:chat.UserInfo.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:chat.UserInfo.username)
}

// bool isFriend = 10;
inline void UserInfo::clear_isfriend() {
  isfriend_ = false;
}
inline bool UserInfo::isfriend() const {
  // @@protoc_insertion_point(field_get:chat.UserInfo.isFriend)
  return isfriend_;
}
inline void UserInfo::set_isfriend(bool value) {
  
  isfriend_ = value;
  // @@protoc_insertion_point(field_set:chat.UserInfo.isFriend)
}

// bool isOnline = 11;
inline void UserInfo::clear_isonline() {
  isonline_ = false;
}
inline bool UserInfo::isonline() const {
  // @@protoc_insertion_point(field_get:chat.UserInfo.isOnline)
  return isonline_;
}
inline void UserInfo::set_isonline(bool value) {
  
  isonline_ = value;
  // @@protoc_insertion_point(field_set:chat.UserInfo.isOnline)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace chat

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protobuf_2fchat_2eproto__INCLUDED
